#include "arduino_secrets.h"
#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "ESP32_CAM"
  https://create.arduino.cc/cloud/things/4578b8bb-6620-4ef3-846b-06476659968d

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float humidity;
  float temperature;
  bool flash;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "DHT.h"
#include "Wire.h"
#include "SSD1306.h"

#define FLASHPIN 4
#define DHTTYPE DHT22
#define DHTPIN 2
#define SDA 15
#define SCL 13

#define WIDTH 128
#define HEIGHT 64

#define CENTERY 32
#define CENTERCENTERY 16

#define thermometerW 7
#define thermometerH 16

const uint8_t thermometer[] PROGMEM = {
  0x1C, 0x22, 0x22, 0x22, 0x22, 0x22, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x4D,
  0x5D, 0x59, 0x22, 0x1C
};

#define waterW 16
#define waterH 11

const uint8_t water[] PROGMEM = {
  0x73, 0xCE, 0xDE, 0x7B, 0x00, 0x00, 0x73, 0xCE, 0xDE, 0x7B, 0x00, 0x00,
  0x73, 0xCE, 0xDE, 0x7B, 0x00, 0x00, 0x73, 0xCE, 0xDE, 0x7B
};

unsigned long DHTTIME = 0;

DHT dht(DHTPIN, DHTTYPE);
SSD1306 display(0x3c, SDA, SCL);

#define tx 16 - (thermometerW / 2)
#define ty CENTERCENTERY - (thermometerH / 2)

#define wx 16 - (waterW / 2)
#define wy CENTERY + (CENTERCENTERY - (waterH / 2))

#define textX WIDTH - 4
#define thermometerTextY CENTERCENTERY - 12
#define waterTextY CENTERY + CENTERCENTERY - 12

String celsius = F("°C");
String percentage = F("%");

void setup() {
  dht.begin();
  display.init();
  display.flipScreenVertically();
  display.setTextAlignment(TEXT_ALIGN_CENTER);
  display.setFont(ArialMT_Plain_24);
  display.drawString(64, 32 - 12, "ESP32-CAM");
  display.display();
  display.setTextAlignment(TEXT_ALIGN_RIGHT);
  pinMode(FLASHPIN, OUTPUT);
  
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  if (millis() - DHTTIME > 5) {
    temperature = dht.readTemperature();
    humidity = dht.readHumidity();
    display.clear();

    display.drawRect(0, 0, WIDTH, HEIGHT);

    display.drawLine(0, CENTERY, WIDTH, CENTERY);

    display.drawXbm(tx, ty, thermometerW, thermometerH, thermometer);
    display.drawString(textX, thermometerTextY, String(temperature) + celsius);

    display.drawXbm(wx, wy, waterW, waterH, water);
    display.drawString(textX, waterTextY, String(humidity) + percentage);

    display.display();
    DHTTIME = millis();
  }
}

/*
  Since Flash is READ_WRITE variable, onFlashChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFlashChange() {
  // Add your code here to act upon Flash change
  digitalWrite(FLASHPIN, flash);
}

